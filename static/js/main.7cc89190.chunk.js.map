{"version":3,"sources":["Table.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["getRendererDate","props","date","value","cellRendererSelector","params","colDef","type","component","SomeComponent","App","useState","setGridApi","setGridColumnApi","rowData","setRowData","className","widthGrid","defaultColDef","flex","minWidth","filter","filterParams","buttons","heightGrid","addRowButton","allowExport","allowImport","columnDefs","field","sortable","editable","headerName","valueGetter","format","tempData","actionsComponent","frameworkComponents","agRendererDate","onGridReady","api","columnApi","fetch","then","resp","json","data","slice","updateData","country","athlete","age","Date","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAMMA,EAAkB,SAACC,GACvB,IAAMC,EAAOD,EAAME,MAEnB,OACI,8BAAMD,KAINE,EAAuB,SAACC,GAE5B,GAAa,SADAA,EAAOC,OAAOC,KAGzB,MAAO,CACLC,UAAW,mBAOXC,EAAgB,kBAAM,8CAEb,SAASC,IAAO,IAAD,EACEC,mBAAS,MADX,mBACZC,GADY,aAEcD,mBAAS,MAFvB,mBAENE,GAFM,aAGEF,mBAAS,MAHX,mBAGrBG,EAHqB,KAGZC,EAHY,KA8C5B,OACI,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,CACIF,QAASA,EACTG,UAAU,OACVC,cAAe,CACbC,KAAM,EACNC,SAAU,IACVC,QAAQ,EACRC,aAAc,CACZC,QAAS,CAAC,QAAS,WAGvBC,WAAW,QACXC,cAAY,EACZC,aAAW,EACXC,aAAW,EACXC,WAAY,CACV,CACEC,MAAO,OACPC,UAAU,EACVvB,KAAM,OACNwB,UAAU,EACVC,WAAY,OACZ5B,qBAAsBA,EACtB6B,YAAa,WAGX,MAAO,SAETC,OAAQ,aACRC,SAAS,CAAC,gBAAiB,YAAa,YAG5CC,iBAAkB,cAAC,EAAD,IAElBC,oBAAqB,CACnBC,eAAgBtC,GAGlBuC,YAjFU,SAAClC,GACnBO,EAAWP,EAAOmC,KAClB3B,EAAiBR,EAAOoC,WAMxBC,MAAM,+DACDC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OANS,SAACA,GAClB/B,EAAW+B,EAAKC,MAAM,EAAG,KAKPC,CACZ,CACE,CAAEC,QAAS,gBAAiBC,QAAS,OAAQC,IAAK,KAAMjD,KAAM,eAC9D,CAAE+C,QAAS,kBAAmBC,QAAS,SAAUC,IAAK,KAAMjD,KAAM,2BAClE,CAAE+C,QAAS,kBAAmBC,QAAS,SAAUC,IAAK,KAAMjD,KAAM,IAAIkD,KAAK,4BAC3E,CAAEH,QAAS,kBAAmBC,QAAS,SAAUC,IAAK,KAAMjD,KAAM,IAAIkD,KAAK,4BAC3E,CAAEH,QAAS,kBAAmBC,QAAS,SAAUC,IAAK,KAAMjD,KAAM,IAAIkD,KAAK,4BAC3E,CAAEH,QAAS,kBAAmBC,QAAS,SAAUC,IAAK,KAAMjD,KAAM,IAAIkD,KAAK,eAC3E,CAAEH,QAAS,kBAAmBC,QAAS,SAAUC,IAAK,KAAMjD,KAAM,IAAIkD,KAAK,yBC7C1E,SAAS1C,IAGpB,OACG,cAAC,EAAD,ICVP,IAYe2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7cc89190.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { DFGrid, DFColumn } from \"df-react-grid\";\nimport dayjs from 'dayjs';\n\nconst DEFAULT_FORMAT = 'DD MMM, YYYY';\n\nconst getRendererDate = (props:any) => {\n  const date = props.value;\n\n  return (\n      <div>{date}</div>\n  )\n};\n\nconst cellRendererSelector = (params:any) => {\n  const type = params.colDef.type;\n  if (type === 'date') {\n\n    return {\n      component: 'agRendererDate'\n    };\n  }\n\n  return undefined;\n};\n\nconst SomeComponent = () => <div>I am a div</div>;\n\nexport default function App() {\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const [rowData, setRowData] = useState(null);\n\n  const onGridReady = (params:any) => {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n\n    const updateData = (data:any) => {\n      setRowData(data.slice(0, 50));\n    };\n\n    fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n        .then((resp) => resp.json())\n        .then((data) => updateData(\n            [\n              { country: 'United States', athlete: 'Alex', age: '15', date: 'Nov 29 2021' },\n              { country: 'United States 1', athlete: 'Alex 1', age: '15', date: 'Dec 12 2020 10:00:00 AM' },\n              { country: 'United States 2', athlete: 'Alex 2', age: '15', date: new Date('Nov 11 2007 10:00:00 AM') },\n              { country: 'United States 2', athlete: 'Alex 2', age: '15', date: new Date('Nov 08 2007 10:00:00 AM') },\n              { country: 'United States 2', athlete: 'Alex 2', age: '15', date: new Date('Oct 10 2007 10:00:00 AM') },\n              { country: 'United States 2', athlete: 'Alex 2', age: '15', date: new Date('12-06-2014') },\n              { country: 'United States 3', athlete: 'Alex 3', age: '15', date: new Date('04-03-2006') },\n            ]\n        ));\n  };\n\n  // @ts-ignore\n  const dateComparator = (a:any, b:any) => new Date(b) - new Date(a);\n\n  const dateFilterParams = {\n    comparator: function (filterLocalDateAtMidnight: string | number | Date, cellValue: string | number | Date) {\n      if (new Date(filterLocalDateAtMidnight) === new Date (cellValue)) {\n        return 0;\n      }\n      if (new Date (cellValue) < new Date(filterLocalDateAtMidnight)) {\n        return -1;\n      }\n      if (new Date (cellValue) > new Date(filterLocalDateAtMidnight)) {\n        return 1;\n      }\n    },\n    browserDatePicker: true,\n  };\n\n  return (\n      <div className=\"App\">\n        <DFGrid\n            rowData={rowData}\n            widthGrid=\"100%\"\n            defaultColDef={{\n              flex: 1,\n              minWidth: 150,\n              filter: true,\n              filterParams: {\n                buttons: ['reset', 'apply']\n              }\n            }}\n            heightGrid=\"400px\"\n            addRowButton\n            allowExport\n            allowImport\n            columnDefs={[\n              {\n                field: \"time\",\n                sortable: true,\n                type: 'date',\n                editable: false,\n                headerName: 'Date',\n                cellRendererSelector: cellRendererSelector,\n                valueGetter: () => {\n                  // const value = new Date(params.data[params.colDef.field])\n\n                  return 'asdas'\n                },\n                format: 'dd-mm-yyyy',\n                tempData:['United States', 'Australia', 'Canada']\n              }\n            ]}\n            actionsComponent={<SomeComponent />}\n\n            frameworkComponents={{\n              agRendererDate: getRendererDate\n            }}\n\n            onGridReady={onGridReady}\n        />\n        {/*  <DFColumn field=\"country\" sortable  editable tempData={['United States', 'Australia', 'Canada']} />*/}\n        {/*  <DFColumn field=\"athlete\" minWidth={180} tempData={['Alex']} />*/}\n        {/*  <DFColumn field=\"age\" filter=\"agNumberColumnFilter\" />*/}\n        {/*  <DFColumn field=\"date\"*/}\n        {/*            headerName='Date'*/}\n        {/*            type=\"date\"*/}\n        {/*      // format={'DD MM,---- YY'}*/}\n        {/*            editable={false}*/}\n        {/*            minWidth={150}*/}\n        {/*            valueGetter={(params:any) => {*/}\n        {/*              const format = params.colDef.format || DEFAULT_FORMAT;*/}\n        {/*              const cellValue = params.data[params.colDef.field];*/}\n        {/*              const isValid = dayjs(cellValue).isValid();*/}\n        {/*              return isValid ? dayjs(cellValue).format(format) : ''*/}\n        {/*            }}*/}\n        {/*            filter=\"agDateColumnFilter\"*/}\n        {/*            comparator={dateComparator}*/}\n        {/*            filterParams={dateFilterParams}*/}\n        {/*            cellRendererSelector={cellRendererSelector}*/}\n        {/*            tempData={[ '12.12.2020', new Date('Dec 11 2020 10:00:00 AM'), new Date('Dec 12 2020 10:00:00 AM'), new Date('Dec 13 2020 10:00:00 AM')]}*/}\n        {/*  />*/}\n\n        {/*</DFGrid>*/}\n      </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { DFGrid, DFColumn } from \"df-react-grid\";\nimport dayjs from 'dayjs';\nimport Table from './Table';\n\n\nexport default function App() {\n\n\n    return (\n       <Table />\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getRendererDate","props","date","value","cellRendererSelector","params","colDef","type","component","SomeComponent","App","useState","setGridApi","setGridColumnApi","rowData","setRowData","dateFilterParams","comparator","filterLocalDateAtMidnight","cellValue","Date","browserDatePicker","className","widthGrid","defaultColDef","flex","minWidth","filter","filterParams","buttons","heightGrid","addRowButton","allowExport","allowImport","actionsComponent","frameworkComponents","agRendererDate","onGridReady","api","columnApi","fetch","then","resp","json","data","slice","updateData","country","athlete","age","field","sortable","editable","tempData","headerName","valueGetter","console","log","format","dayjs","a","b","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a60bba9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { HeroGrid, HeroColumn } from \"hero-react-grid\";\nimport dayjs from 'dayjs';\n\nconst DEFAULT_FORMAT = 'DD MMM, YYYY';\n\nconst getRendererDate = props => {\n    const date = props.value;\n\n    return (\n        <div>{date}</div>\n    )\n};\n\nconst cellRendererSelector = (params) => {\n    const type = params.colDef.type;\n    if (type === 'date') {\n\n        return {\n            component: 'agRendererDate'\n        };\n    }\n\n    return undefined;\n};\n\nconst SomeComponent = () => <div>I am a div</div>;\n\nexport default function App() {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const [rowData, setRowData] = useState(null);\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n\n        const updateData = (data) => {\n            setRowData(data.slice(0, 50));\n        };\n\n        fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n            .then((resp) => resp.json())\n            .then((data) => updateData(\n                [\n                    { country: 'United States', athlete: 'Alex', age: '15', date: 'Nov 29 2021' },\n                    { country: 'United States 1', athlete: 'Alex 1', age: '15', date: 'Dec 12 2020 10:00:00 AM' },\n                    { country: 'United States 2', athlete: 'Alex 2', age: '15', date: new Date('Nov 11 2007 10:00:00 AM') },\n                    { country: 'United States 2', athlete: 'Alex 2', age: '15', date: new Date('Nov 08 2007 10:00:00 AM') },\n                    { country: 'United States 2', athlete: 'Alex 2', age: '15', date: new Date('Oct 10 2007 10:00:00 AM') },\n                    { country: 'United States 2', athlete: 'Alex 2', age: '15', date: new Date('12-06-2014') },\n                    { country: 'United States 3', athlete: 'Alex 3', age: '15', date: new Date('04-03-2006') },\n                    ]\n            ));\n    };\n\n    const dateComparator = (a, b) => new Date(b) - new Date(a);\n\n    const dateFilterParams = {\n        comparator: function (filterLocalDateAtMidnight, cellValue) {\n            if (new Date(filterLocalDateAtMidnight) === new Date (cellValue)) {\n                return 0;\n            }\n            if (new Date (cellValue) < new Date(filterLocalDateAtMidnight)) {\n                return -1;\n            }\n            if (new Date (cellValue) > new Date(filterLocalDateAtMidnight)) {\n                return 1;\n            }\n        },\n        browserDatePicker: true,\n    };\n\n    return (\n        <div className=\"App\">\n            <HeroGrid\n                rowData={rowData}\n                widthGrid=\"100%\"\n                defaultColDef={{\n                    flex: 1,\n                    minWidth: 150,\n                    filter: true,\n                    filterParams: {\n                        buttons: ['reset', 'apply']\n                    }\n                }}\n                heightGrid=\"400px\"\n                addRowButton\n                allowExport\n                allowImport\n                actionsComponent={<SomeComponent />}\n\n                frameworkComponents={{\n                    agRendererDate: getRendererDate\n                }}\n\n                onGridReady={onGridReady}\n            >\n                <HeroColumn field=\"country\" sortable  editable tempData={['United States', 'Australia', 'Canada']} />\n                <HeroColumn field=\"athlete\" minWidth={180} tempData={['Alex']} />\n                <HeroColumn field=\"age\" filter=\"agNumberColumnFilter\" />\n                <HeroColumn field=\"date\"\n                    headerName='Date'\n                    type=\"date\"\n                    // format={'DD MM,---- YY'}\n                    editable={false}\n                    minWidth={150}\n                    valueGetter={params => {\n                        console.log(params)\n                        const format = params.colDef.format || DEFAULT_FORMAT;\n                        return dayjs(params.data[params.colDef.field]).format(format)\n                    }}\n                    filter=\"agDateColumnFilter\"\n                    comparator={dateComparator}\n                    filterParams={dateFilterParams}\n                    cellRendererSelector={cellRendererSelector}\n                    tempData={[ new Date(), new Date('Dec 11 2020 10:00:00 AM'), new Date('Dec 12 2020 10:00:00 AM'), new Date('Dec 13 2020 10:00:00 AM')]}\n                />\n\n            </HeroGrid>\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
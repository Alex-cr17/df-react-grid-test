{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SomeComponent","App","useState","setGridApi","setGridColumnApi","rowData","setRowData","filterParams","comparator","filterLocalDateAtMidnight","cellValue","dateParts","split","cellDate","Date","Number","getTime","browserDatePicker","className","widthGrid","defaultColDef","flex","minWidth","filter","buttons","heightGrid","addRowButton","allowExport","allowImport","actionsComponent","onGridReady","params","api","columnApi","fetch","then","resp","json","data","slice","updateData","field","sortable","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAGMA,EAAgB,kBAAM,8CACb,SAASC,IAAO,IAAD,EACIC,mBAAS,MADb,mBACVC,GADU,aAEgBD,mBAAS,MAFzB,mBAEJE,GAFI,aAGIF,mBAAS,MAHb,mBAGnBG,EAHmB,KAGVC,EAHU,KAkBpBC,EAAe,CACjBC,WAAY,SAAUC,EAA2BC,GAE7C,GAAoB,MADDA,EACO,OAAQ,EAClC,IAAIC,EAFeD,EAEUE,MAAM,KAC/BC,EAAW,IAAIC,KACfC,OAAOJ,EAAU,IACjBI,OAAOJ,EAAU,IAAM,EACvBI,OAAOJ,EAAU,KAErB,OAAIF,EAA0BO,YAAcH,EAASG,UAC1C,EAEPH,EAAWJ,GACH,EAERI,EAAWJ,EACJ,OADX,GAIJQ,mBAAmB,GAGvB,OACI,qBAAKC,UAAU,MAAf,SACI,eAAC,IAAD,CACIb,QAASA,EACTc,UAAU,OACVC,cAAe,CACXC,KAAM,EACNC,SAAU,IACVC,QAAQ,EACRhB,aAAc,CACViB,QAAS,CAAC,QAAS,WAG3BC,WAAW,QACXC,cAAY,EACZC,aAAW,EACXC,aAAW,EACXC,iBAAkB,cAAC,EAAD,IAClBC,YAtDQ,SAACC,GACjB5B,EAAW4B,EAAOC,KAClB5B,EAAiB2B,EAAOE,WAMxBC,MAAM,+DACDC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OANS,SAACA,GAChBhC,EAAWgC,EAAKC,MAAM,EAAG,KAKTC,CAAWF,OA4B3B,UAkBI,cAAC,IAAD,CAAYG,MAAM,UAAUC,UAAQ,IACpC,cAAC,IAAD,CAAYD,MAAM,UAAUnB,SAAU,MACtC,cAAC,IAAD,CAAYmB,MAAM,MAAMlB,OAAO,yBAC/B,cAAC,IAAD,CAAYkB,MAAM,SAClB,cAAC,IAAD,CAAYA,MAAM,OAAOnB,SAAU,IAAKC,OAAO,qBAAqBhB,aAAcA,IAClF,cAAC,IAAD,CAAYkC,MAAM,QAAQnB,SAAU,MACpC,cAAC,IAAD,CAAYmB,MAAM,SAClB,cAAC,IAAD,CAAYA,MAAM,WAClB,cAAC,IAAD,CAAYA,MAAM,WAClB,cAAC,IAAD,CAAYA,MAAM,eC1ElC,IAYeE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACpD,EAAD,MAEFqD,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.0be4b769.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { HeroGrid, HeroColumn } from \"hero-react-grid\";\n\nconst SomeComponent = () => <div>I am a div</div>;\nexport default function App() {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const [rowData, setRowData] = useState(null);\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n\n        const updateData = (data) => {\n            setRowData(data.slice(0, 50));\n        };\n\n        fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n            .then((resp) => resp.json())\n            .then((data) => updateData(data));\n    };\n\n    const filterParams = {\n        comparator: function (filterLocalDateAtMidnight, cellValue) {\n            var dateAsString = cellValue;\n            if (dateAsString == null) return -1;\n            var dateParts = dateAsString.split('/');\n            var cellDate = new Date(\n                Number(dateParts[2]),\n                Number(dateParts[1]) - 1,\n                Number(dateParts[0])\n            );\n            if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\n                return 0;\n            }\n            if (cellDate < filterLocalDateAtMidnight) {\n                return -1;\n            }\n            if (cellDate > filterLocalDateAtMidnight) {\n                return 1;\n            }\n        },\n        browserDatePicker: true,\n    };\n\n    return (\n        <div className=\"App\">\n            <HeroGrid\n                rowData={rowData}\n                widthGrid=\"100%\"\n                defaultColDef={{\n                    flex: 1,\n                    minWidth: 150,\n                    filter: true,\n                    filterParams: {\n                        buttons: ['reset', 'apply']\n                    }\n                }}\n                heightGrid=\"400px\"\n                addRowButton\n                allowExport\n                allowImport\n                actionsComponent={<SomeComponent />}\n                onGridReady={onGridReady}\n            >\n                <HeroColumn field=\"country\" sortable />\n                <HeroColumn field=\"athlete\" minWidth={180} />\n                <HeroColumn field=\"age\" filter=\"agNumberColumnFilter\" />\n                <HeroColumn field=\"year\" />\n                <HeroColumn field=\"date\" minWidth={150} filter=\"agDateColumnFilter\" filterParams={filterParams} />\n                <HeroColumn field=\"sport\" minWidth={150} />\n                <HeroColumn field=\"gold\" />\n                <HeroColumn field=\"silver\" />\n                <HeroColumn field=\"bronze\" />\n                <HeroColumn field=\"total\" />\n            </HeroGrid>\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getDatePicker","Datepicker","prototype","init","params","this","eInput","document","createElement","value","Date","dateFormat","pattern","classList","add","style","height","console","log","getGui","afterGuiAttached","focus","select","getValue","destroy","isPopup","getRendererDate","props","date","dd","String","getDate","padStart","today","getMonth","getFullYear","cellEditorSelector","fieldId","colDef","field","data","isNaN","component","cellRendererSelector","SomeComponent","App","useState","setGridApi","setGridColumnApi","rowData","setRowData","filterParams","comparator","filterLocalDateAtMidnight","cellValue","dateParts","split","cellDate","Number","getTime","browserDatePicker","className","widthGrid","defaultColDef","flex","minWidth","filter","buttons","heightGrid","addRowButton","allowExport","allowImport","actionsComponent","components","agDateInput","frameworkComponents","agRendererDate","onGridReady","api","columnApi","fetch","then","resp","json","slice","updateData","sortable","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2MAGA,SAASA,IACL,SAASC,KA2BT,OA1BAA,EAAWC,UAAUC,KAAO,SAAUC,GAElCC,KAAKC,OAASC,SAASC,cAAc,SACrCH,KAAKC,OAAOG,MAAQ,IAAIC,KAAKN,EAAOK,OACpCJ,KAAKC,OAAOK,WAAa,WACzBN,KAAKC,OAAOM,QAAU,6BACtBP,KAAKC,OAAOO,UAAUC,IAAI,YAC1BT,KAAKC,OAAOS,MAAMC,OAAS,OAC3BC,QAAQC,IAAIb,KAAKC,SAGrBL,EAAWC,UAAUiB,OAAS,WAC1B,OAAOd,KAAKC,QAEhBL,EAAWC,UAAUkB,iBAAmB,WACpCH,QAAQC,IAAI,mBAAoBb,KAAKC,QACrCD,KAAKC,OAAOe,QACZhB,KAAKC,OAAOgB,UAEhBrB,EAAWC,UAAUqB,SAAW,WAC5B,OAAOlB,KAAKC,OAAOG,OAEvBR,EAAWC,UAAUsB,QAAU,aAC/BvB,EAAWC,UAAUuB,QAAU,WAC3B,OAAO,GAEJxB,EAGX,IAAMyB,EAAkB,SAACC,GAErB,IAAMC,EAAOD,EAAMlB,MACboB,EAAKC,OAAOF,EAAKG,WAAWC,SAAS,EAAG,KAIxCC,EAHKH,OAAOF,EAAKM,WAAa,GAAGF,SAAS,EAAG,KAGhC,IAAMH,EAAK,IAFjBD,EAAKO,cAIlB,OACI,8BACKF,KAKb,SAASG,EAAmBhC,GACxB,IAAMiC,EAAUjC,EAAOkC,OAAOC,MAC9B,GAAInC,EAAOoC,KAAKH,aAAoB3B,OAAS+B,MAAMrC,EAAOoC,KAAKH,IAC3D,MAAO,CACHK,UAAW,eAOvB,SAASC,EAAqBvC,GAC1B,IAAMiC,EAAUjC,EAAOkC,OAAOC,MAC9B,GAAInC,EAAOoC,KAAKH,aAAoB3B,OAAS+B,MAAMrC,EAAOoC,KAAKH,IAC3D,MAAO,CACHK,UAAW,kBAOvB,IAAME,EAAgB,kBAAM,8CACb,SAASC,IAAO,IAAD,EACIC,mBAAS,MADb,mBACVC,GADU,aAEgBD,mBAAS,MAFzB,mBAEJE,GAFI,aAGIF,mBAAS,MAHb,mBAGnBG,EAHmB,KAGVC,EAHU,KAkBpBC,EAAe,CACjBC,WAAY,SAAUC,EAA2BC,GAE7C,GAAoB,MADDA,EACO,OAAQ,EAClC,IAAIC,EAFeD,EAEUE,MAAM,KAC/BC,EAAW,IAAI/C,KACfgD,OAAOH,EAAU,IACjBG,OAAOH,EAAU,IAAM,EACvBG,OAAOH,EAAU,KAErB,OAAIF,EAA0BM,YAAcF,EAASE,UAC1C,EAEPF,EAAWJ,GACH,EAERI,EAAWJ,EACJ,OADX,GAIJO,mBAAmB,GAGvB,OACI,qBAAKC,UAAU,MAAf,SACI,eAAC,IAAD,CACIZ,QAASA,EACTa,UAAU,OACVC,cAAe,CACXC,KAAM,EACNC,SAAU,IACVC,QAAQ,EACRf,aAAc,CACVgB,QAAS,CAAC,QAAS,WAG3BC,WAAW,QACXC,cAAY,EACZC,aAAW,EACXC,aAAW,EACXC,iBAAkB,cAAC,EAAD,IAClBC,WAAY,CACRC,YAAa1E,KAEjB2E,oBAAqB,CACjBC,eAAgBlD,GAGpBmD,YA7DQ,SAACzE,GACjB2C,EAAW3C,EAAO0E,KAClB9B,EAAiB5C,EAAO2E,WAMxBC,MAAM,+DACDC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACzC,GAAD,OANS,SAACA,GAChBU,EAAWV,EAAK4C,MAAM,EAAG,KAKTC,CAAW7C,OA4B3B,UAyBI,cAAC,IAAD,CAAYD,MAAM,UAAU+C,UAAQ,IACpC,cAAC,IAAD,CAAY/C,MAAM,UAAU0B,SAAU,MACtC,cAAC,IAAD,CAAY1B,MAAM,MAAM2B,OAAO,yBAC/B,cAAC,IAAD,CAAY3B,MAAM,SAClB,cAAC,IAAD,CAAYA,MAAM,OACN0B,SAAU,IACVC,OAAO,qBACPf,aAAcA,EACdR,qBAAsBA,EACtBP,mBAAoBA,IAEhC,cAAC,IAAD,CAAYG,MAAM,QAAQ0B,SAAU,MACpC,cAAC,IAAD,CAAY1B,MAAM,SAClB,cAAC,IAAD,CAAYA,MAAM,WAClB,cAAC,IAAD,CAAYA,MAAM,WAClB,cAAC,IAAD,CAAYA,MAAM,eC5JlC,IAYegD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACpD,EAAD,MAEFtC,SAAS2F,eAAe,SAM1BX,K","file":"static/js/main.5744f668.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { HeroGrid, HeroColumn } from \"hero-react-grid\";\n\nfunction getDatePicker() {\n    function Datepicker() {}\n    Datepicker.prototype.init = function (params) {\n\n        this.eInput = document.createElement('input');\n        this.eInput.value = new Date(params.value);\n        this.eInput.dateFormat = 'dd/mm/yy';\n        this.eInput.pattern = '[0-9]{4}-[0-9]{2}-[0-9]{2}';\n        this.eInput.classList.add('ag-input');\n        this.eInput.style.height = '100%';\n        console.log(this.eInput)\n        // $(this.eInput).datepicker({ dateFormat: 'dd/mm/yy' });\n    };\n    Datepicker.prototype.getGui = function () {\n        return this.eInput;\n    };\n    Datepicker.prototype.afterGuiAttached = function () {\n        console.log('afterGuiAttached', this.eInput)\n        this.eInput.focus();\n        this.eInput.select();\n    };\n    Datepicker.prototype.getValue = function () {\n        return this.eInput.value;\n    };\n    Datepicker.prototype.destroy = () => {};\n    Datepicker.prototype.isPopup = () => {\n        return false;\n    };\n    return Datepicker;\n}\n\nconst getRendererDate = (props) => {\n\n    const date = props.value;\n    const dd = String(date.getDate()).padStart(2, '0');\n    const mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!\n    const yyyy = date.getFullYear();\n\n    const today = mm + ' ' + dd + ' ' + yyyy;\n\n    return (\n        <div>\n            {today}\n        </div>\n    )\n};\n\nfunction cellEditorSelector(params) {\n    const fieldId = params.colDef.field;\n    if (params.data[fieldId] instanceof Date && !isNaN(params.data[fieldId])) {\n        return {\n            component: 'agDateInput',\n        };\n    }\n\n    return undefined;\n}\n\nfunction cellRendererSelector(params) {\n    const fieldId = params.colDef.field;\n    if (params.data[fieldId] instanceof Date && !isNaN(params.data[fieldId])) {\n        return {\n            component: 'agRendererDate'\n        };\n    }\n\n    return undefined;\n}\n\nconst SomeComponent = () => <div>I am a div</div>;\nexport default function App() {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const [rowData, setRowData] = useState(null);\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n\n        const updateData = (data) => {\n            setRowData(data.slice(0, 50));\n        };\n\n        fetch(\"https://www.ag-grid.com/example-assets/olympic-winners.json\")\n            .then((resp) => resp.json())\n            .then((data) => updateData(data));\n    };\n\n    const filterParams = {\n        comparator: function (filterLocalDateAtMidnight, cellValue) {\n            var dateAsString = cellValue;\n            if (dateAsString == null) return -1;\n            var dateParts = dateAsString.split('/');\n            var cellDate = new Date(\n                Number(dateParts[2]),\n                Number(dateParts[1]) - 1,\n                Number(dateParts[0])\n            );\n            if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\n                return 0;\n            }\n            if (cellDate < filterLocalDateAtMidnight) {\n                return -1;\n            }\n            if (cellDate > filterLocalDateAtMidnight) {\n                return 1;\n            }\n        },\n        browserDatePicker: true,\n    };\n\n    return (\n        <div className=\"App\">\n            <HeroGrid\n                rowData={rowData}\n                widthGrid=\"100%\"\n                defaultColDef={{\n                    flex: 1,\n                    minWidth: 150,\n                    filter: true,\n                    filterParams: {\n                        buttons: ['reset', 'apply']\n                    }\n                }}\n                heightGrid=\"400px\"\n                addRowButton\n                allowExport\n                allowImport\n                actionsComponent={<SomeComponent />}\n                components={{\n                    agDateInput: getDatePicker(),\n                }}\n                frameworkComponents={{\n                    agRendererDate: getRendererDate\n                }}\n\n                onGridReady={onGridReady}\n            >\n                <HeroColumn field=\"country\" sortable />\n                <HeroColumn field=\"athlete\" minWidth={180} />\n                <HeroColumn field=\"age\" filter=\"agNumberColumnFilter\" />\n                <HeroColumn field=\"year\" />\n                <HeroColumn field=\"date\"\n                            minWidth={150}\n                            filter=\"agDateColumnFilter\"\n                            filterParams={filterParams}\n                            cellRendererSelector={cellRendererSelector}\n                            cellEditorSelector={cellEditorSelector}\n                />\n                <HeroColumn field=\"sport\" minWidth={150} />\n                <HeroColumn field=\"gold\" />\n                <HeroColumn field=\"silver\" />\n                <HeroColumn field=\"bronze\" />\n                <HeroColumn field=\"total\" />\n            </HeroGrid>\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}